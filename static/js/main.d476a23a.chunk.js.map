{"version":3,"sources":["Stats.js","Stopwatch.js","Header.js","Counter.js","Icon.js","Player.js","PlayersArray.js","Form.js","Banner.js","App.js","index.js"],"names":["Stats","props","className","totalPlayers","totalScores","Stopwatch","state","isRunning","elapsedTime","previousTime","tick","now","Date","setState","prevState","handleStopwatch","handleReset","this","intervalID","setInterval","clearInterval","seconds","Math","floor","onClick","React","Component","Header","title","defaultProps","Counter","changeScore","id","score","Icon","isHighScore","viewBox","d","transform","width","height","Player","handleRemovePlayer","player","name","PureComponent","playersArray","Form","value","handleValueChange","event","copyOfState","target","handleSubmit","preventDefault","addPlayer","onSubmit","type","onChange","placeholder","Banner","role","aria-label","App","players","prevPlayerId","filter","handleAddPlayer","playerName","newPlayer","copyOfPlayers","updatePlayerFromState","updatedPlayerObj","map","handleScoreChange","playerID","delta","foundPlayer","find","updatedPlayer","getHighestScore","scores","highScore","max","reduce","total","arrayOfPlayerComponents","key","length","ReactDOM","render","document","getElementById"],"mappings":"iOA0BeA,MAvBf,SAAeC,GAEX,OACI,2BAAOC,UAAU,SACb,+BACI,4BACA,wCACA,4BAAKD,EAAME,eAEX,4BACA,6CACA,4BAAKF,EAAMG,iBCoDZC,E,4MA9DXC,MAAQ,CACJC,WAAW,EACXC,YAAa,EACbC,aAAc,G,EAWlBC,KAAO,WACH,GAAI,EAAKJ,MAAMC,UAAU,CACrB,IAAMI,EAAMC,KAAKD,MACjB,EAAKE,UAAS,SAACC,GACX,MAAO,CACHL,aAAcE,EACdH,YAAaM,EAAUN,aAAeG,EAAMG,EAAUL,oB,EAMtEM,gBAAkB,WACd,EAAKF,UAAS,SAAEC,GACZ,MAAO,CAAEP,WAAYO,EAAUP,cAE9B,EAAKD,MAAMC,WACZ,EAAKM,SAAS,CACVJ,aAAcG,KAAKD,S,EAI/BK,YAAc,WACV,EAAKH,SAAS,CACVL,YAAa,K,kEAhCD,IAAD,OACfS,KAAKC,WAAaC,aAAY,kBAAM,EAAKT,SAAQ,O,6CAIjDU,cAAcH,KAAKC,c,+BAiCnB,IAAMG,EAAWC,KAAKC,MAAON,KAAKX,MAAME,YAAc,KAEtD,OACI,yBAAKN,UAAU,aACX,yCACA,0BAAMA,UAAU,kBACVmB,GAEN,4BAAQG,QAAUP,KAAKF,iBACjBE,KAAKX,MAAMC,UAAY,OAAS,SAEtC,4BAAQiB,QAAUP,KAAKD,aAAvB,c,GAzDQS,IAAMC,WCG9B,SAASC,EAAO1B,GAEZ,OACI,6BACI,gCACI,kBAAC,EAAD,CAAOE,aAAcF,EAAME,aAAcC,YAAaH,EAAMG,cAC5D,4BAAKH,EAAM2B,OACX,kBAAC,EAAD,QAWhBD,EAAOE,aAAe,CAClBD,MAAO,cAGID,QCGAG,MA3Bf,SAAiB7B,GACb,OACI,yBAAKC,UAAU,WACX,4BACIA,UAAU,2BACVsB,QAAS,kBAAMvB,EAAM8B,YAAY9B,EAAM+B,IAAK,KAFhD,KAMA,0BAAM9B,UAAU,iBAAhB,IAAmCD,EAAMgC,MAAzC,KACA,4BACI/B,UAAU,2BACVsB,QAAS,kBAAMvB,EAAM8B,YAAY9B,EAAM+B,GAAI,KAF/C,OCIGE,MAdf,SAAcjC,GAEV,OACI,yBAAKC,UAAYD,EAAMkC,YAAc,gBAAkB,KAAOC,QAAQ,aAClE,0BAAMC,EAAE,gNAAgNC,UAAU,0BAClO,0BAAMC,MAAM,UAAUC,OAAO,UAAUF,UAAU,iCC8B9CG,E,uKAnBD,IAAD,OACL,OACI,yBAAKvC,UAAU,UACX,0BAAMA,UAAU,eACZ,4BACIA,UAAU,gBACVsB,QAAU,kBAAM,EAAKvB,MAAMyC,mBAAmB,EAAKzC,MAAM0C,OAAOX,MAFpE,UAMA,kBAAC,EAAD,CAAMG,YAAalB,KAAKhB,MAAMkC,cAC5BlB,KAAKhB,MAAM0C,OAAOC,MAExB,kBAAC,EAAD,CAASX,MAAOhB,KAAKhB,MAAM0C,OAAOV,MAAOD,GAAIf,KAAKhB,MAAM0C,OAAOX,GAAID,YAAad,KAAKhB,MAAM8B,mB,GA3BtFN,IAAMoB,eCkBZC,EAvBM,CACjB,CACIF,KAAM,aACNX,MAAO,EACPD,GAAI,GAER,CACIY,KAAM,aACNX,MAAO,EACPD,GAAI,GAER,CACIY,KAAM,eACNX,MAAO,EACPD,GAAI,GAER,CACIY,KAAM,cACNX,MAAO,EACPD,GAAI,IC0BGe,E,4MAzCXzC,MAAQ,CACJ0C,MAAO,I,EAIXC,kBAAoB,SAACC,GACjB,IAAIC,EAAW,eAAO,EAAK7C,OAC3B6C,EAAYH,MAAQE,EAAME,OAAOJ,MACjC,EAAKnC,UAAU,WACX,OAAOsC,M,EAIfE,aAAe,SAACH,GACZA,EAAMI,iBACN,EAAKrD,MAAMsD,UAAU,EAAKjD,MAAM0C,OAChC,IAAIG,EAAW,eAAO,EAAK7C,OAC3B6C,EAAYH,MAAQ,GACpB,EAAKnC,SAAS,CACVmC,MAAOG,EAAYH,S,uDAKvB,OACI,0BAAMQ,SAAUvC,KAAKoC,cACjB,2BACII,KAAK,OACLT,MAAO/B,KAAKX,MAAM0C,MAClBU,SAAUzC,KAAKgC,kBACfU,YAAY,0BAEhB,2BACIF,KAAK,SACLT,MAAM,oB,GApCPvB,IAAMC,WCgBVkC,MAhBf,WACI,OACI,6BACI,wBAAI1D,UAAU,UAAd,mBACA,4BACI,oEACA,sEACA,sEACA,oEACA,iFACA,0BAAM2D,KAAK,MAAMC,aAAW,aAA5B,uCCyFDC,E,4MA1FbzD,MAAQ,CACN0D,QAASlB,G,EAGXmB,aAAe,E,EAEfvB,mBAAqB,SAACV,GACpB,EAAKnB,UAAU,SAAAC,GACb,MAAO,CACLkD,QAASlD,EAAUkD,QAAQE,QAAQ,SAAAvB,GAAM,OAAIA,EAAOX,KAAOA,U,EAKjEmC,gBAAkB,SAACC,GACjB,IAAIC,EAAY,CACdzB,KAAMwB,EACNnC,MAAO,EACPD,GAAI,EAAKiC,cAAgB,GAEvBK,EAAa,sBAAO,EAAKhE,MAAM0D,SAAlB,CAA2BK,IAC5C,EAAKxD,UAAS,iBAAO,CACnBmD,QAASM,O,EAIbC,sBAAwB,SAACC,GACvB,IAAIF,EAAgB,EAAKhE,MAAM0D,QAAQS,KAAI,SAAC9B,GAC1C,OAAGA,EAAOX,KAAOwC,EAAiBxC,GACzBwC,EAEA7B,KAGX,EAAK9B,UAAS,WACZ,MAAO,CAACmD,QAASM,O,EAIrBI,kBAAoB,SAACC,EAAUC,GAC3B,IAAIC,EAAc,EAAKvE,MAAM0D,QAAQc,MAAK,SAAAnC,GAAM,OAAIA,EAAOX,KAAO2C,KAC9DI,EAAa,eAAOF,GACxBE,EAAc9C,OAAS2C,EACvB,EAAKL,sBAAsBQ,I,EAG/BC,gBAAkB,WAChB,IAAIC,EAAS,EAAK3E,MAAM0D,QAAQS,KAAI,SAAC9B,GAAD,OAAYA,EAAOV,SACnDiD,EAAY5D,KAAK6D,IAAL,MAAA7D,KAAI,YAAQ2D,IAC5B,OAAIC,GAGG,M,uDAIC,IAAD,OAEH9E,EAAca,KAAKX,MAAM0D,QAAQoB,QAAO,SAACC,EAAO1C,GAClD,OAAO0C,EAAQ1C,EAAOV,QACrB,GAECiD,EAAYjE,KAAK+D,kBAEjBM,EAA0BrE,KAAKX,MAAM0D,QAAQS,KAAI,SAAC9B,GACpD,OAAO,kBAAC,EAAD,CACG4C,IAAK5C,EAAOX,GACZW,OAAQA,EACRX,GAAIW,EAAOX,GACXU,mBAAoB,EAAKA,mBACzBX,YAAa,EAAK2C,kBAClBvC,YAAa+C,IAAcvC,EAAOV,WAI9C,OACE,yBAAK/B,UAAU,cACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEC,aAAcmF,EAAwBE,OACtCpF,YAAaA,IAEbkF,EACF,kBAAC,EAAD,CAAM/B,UAAWtC,KAAKkD,uB,GArFZ1C,IAAMC,WCJxB+D,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.d476a23a.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction Stats(props) {\n\n    return(\n        <table className=\"stats\">\n            <tbody>\n                <tr>\n                <td>Players:</td>\n                <td>{props.totalPlayers}</td>\n                </tr>\n                <tr>\n                <td>Total Points:</td>\n                <td>{props.totalScores}</td>\n                </tr>\n            </tbody>\n        </table>\n    )\n}\n\nStats.propTypes = {\n    totalPlayers: PropTypes.number,\n    totalScores: PropTypes.number\n}\n\nexport default Stats","import React from 'react';\n\nclass Stopwatch extends React.Component {\n\n    state = {\n        isRunning: false,\n        elapsedTime: 0,\n        previousTime: 0\n    };\n\n    componentDidMount(){\n        this.intervalID = setInterval(() => this.tick(), 100)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.intervalID)\n    }\n\n    tick = () =>{\n        if (this.state.isRunning){\n            const now = Date.now()\n            this.setState((prevState) => {\n                return { \n                    previousTime: now,\n                    elapsedTime: prevState.elapsedTime + (now - prevState.previousTime)\n                }\n            });\n        }\n    }\n\n    handleStopwatch = () => {\n        this.setState(( prevState ) => { \n            return { isRunning: !prevState.isRunning }\n        })\n        if (!this.state.isRunning){\n            this.setState({\n                previousTime: Date.now()\n            })\n        }\n    }\n    handleReset = () => {\n        this.setState({\n            elapsedTime: 0\n        })\n    }\n\n    render(){\n\n        const seconds =  Math.floor( this.state.elapsedTime / 1000 )\n\n        return (\n            <div className=\"stopwatch\" >\n                <h2>Stopwatch</h2>\n                <span className=\"stopwatch-time\">\n                    { seconds }\n                </span>\n                <button onClick={ this.handleStopwatch }>\n                    { this.state.isRunning ? 'Stop' : 'Start' }\n                </button>\n                <button onClick={ this.handleReset } >Reset</button>\n            </div>\n        )\n    }\n\n}\n\nexport default Stopwatch","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Stats from './Stats'\nimport Stopwatch from './Stopwatch'\n\nfunction Header(props) {\n\n    return (\n        <div>\n            <header>\n                <Stats totalPlayers={props.totalPlayers} totalScores={props.totalScores} />\n                <h1>{props.title}</h1>\n                <Stopwatch />\n            </header>\n        </div>\n    )\n}\n\nHeader.propTypes = {\n    title: PropTypes.string,\n    totalPlayers: PropTypes.number\n}\n\nHeader.defaultProps = {\n    title: 'Scoreboard'\n}\n\nexport default Header","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction Counter(props) {\n    return(\n        <div className='counter'>\n            <button \n                className='counter-action decrement'\n                onClick={() => props.changeScore(props.id, -1)}\n                > \n                - \n            </button>\n            <span className='counter-score'> { props.score } </span>\n            <button \n                className='counter-action increment' \n                onClick={() => props.changeScore(props.id, +1)}\n                > \n                + \n            </button>\n        </div>\n    )\n\n}\n\nCounter.propTypes = {\n    id: PropTypes.number,\n    score: PropTypes.number,\n    changeScore: PropTypes.func\n}\n\nexport default Counter\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction Icon(props) {\n\n    return(\n        <svg className={ props.isHighScore ? 'is-high-score' : null } viewBox=\"0 0 44 35\">\n            <path d=\"M26.7616 10.6207L21.8192 0L16.9973 10.5603C15.3699 14.1207 10.9096 15.2672 7.77534 12.9741L0 7.24138L6.56986 28.8448H37.0685L43.5781 7.72414L35.7425 13.0948C32.6685 15.2672 28.3288 14.0603 26.7616 10.6207Z\" transform=\"translate(0 0.301727)\"/>\n            <rect width=\"30.4986\" height=\"3.07759\" transform=\"translate(6.56987 31.5603)\"/>\n        </svg>\n    )\n}\n\nIcon.propTypes = {\n    isHighScore: PropTypes.bool\n}\n\nexport default Icon","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Counter from './Counter'\nimport Icon from './Icon'\n\nclass Player extends React.PureComponent {\n\n    static propTypes = {\n        handleRemovePlayer: PropTypes.func.isRequired, \n        changeScore: PropTypes.func.isRequired, \n        player: PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            name: PropTypes.string.isRequired,\n            score: PropTypes.number.isRequired\n        }),\n        isHighScore: PropTypes.bool\n    } \n    //static vs define proptypes outside the class. Static is easier to see and straightforward.\n\n    render() {\n        return (\n            <div className='player'>\n                <span className='player-name'>\n                    <button \n                        className=\"remove-player\" \n                        onClick={ () => this.props.handleRemovePlayer(this.props.player.id) }\n                        >\n                        ✖\n                    </button>\n                    <Icon isHighScore={this.props.isHighScore} />\n                    { this.props.player.name } \n                </span>\n                <Counter score={this.props.player.score} id={this.props.player.id} changeScore={this.props.changeScore}/>\n            </div>\n        )\n    }\n}\n\nexport default Player","const playersArray = [\n    {\n        name: \"Player One\",\n        score: 0,\n        id: 1\n    },\n    {\n        name: \"Player Two\",\n        score: 0,\n        id: 2\n    },\n    {\n        name: \"Player Three\",\n        score: 0,\n        id: 3\n    },\n    {\n        name: \"Player Four\",\n        score: 0,\n        id: 4\n    }\n]\n\nexport default playersArray","import React from 'react'\n\nclass Form extends React.Component {\n\n    state = {\n        value: ''\n    }\n\n\n    handleValueChange = (event) => {\n        let copyOfState = {...this.state}\n        copyOfState.value = event.target.value\n        this.setState( () => {\n            return copyOfState\n        })\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault()\n        this.props.addPlayer(this.state.value)\n        let copyOfState = {...this.state}\n        copyOfState.value = ''\n        this.setState({\n            value: copyOfState.value \n        })\n    }\n\n    render(){\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <input\n                    type=\"text\"\n                    value={this.state.value}\n                    onChange={this.handleValueChange}\n                    placeholder=\"Enter a player's name\"\n                />\n                <input\n                    type=\"submit\"\n                    value=\"Add player\"\n                />\n            </form>\n        )\n    }\n}\n\nexport default Form","import React from 'react'\n\nfunction Banner() {\n    return(\n        <div>\n            <h1 className=\"banner\"> Instructions: </h1>\n            <ul>\n                <li>Press 'X' to remove default players.</li>\n                <li>Add players on the bottom input field.</li>\n                <li> \"+\" and \"-\" buttons to update scores.</li>\n                <li>Timer provided for your convenience.</li>\n                <li> **You can go negative with the scores if you want \n                <span role=\"img\" aria-label=\"idk-emoji\"> 🤷‍♂️</span></li>      \n            </ul>\n        </div>\n    )\n}\n\nexport default Banner","import React from 'react';\n\nimport './App.css';\nimport Header from './Header'\nimport Player from './Player'\nimport playersArray from './PlayersArray'\nimport Form from './Form'\nimport Banner from './Banner'\n\nclass App extends React.Component {\n\n  state = {\n    players: playersArray\n  }\n\n  prevPlayerId = 4\n\n  handleRemovePlayer = (id) => {\n    this.setState( prevState => {\n      return {\n        players: prevState.players.filter( player => player.id !== id)\n      }\n    })\n  }\n\n  handleAddPlayer = (playerName) => {\n    let newPlayer = {\n      name: playerName,\n      score: 0, \n      id: this.prevPlayerId += 1\n    }\n    let copyOfPlayers = [...this.state.players, newPlayer]\n    this.setState(() => ({\n      players: copyOfPlayers\n    })) \n  }\n\n  updatePlayerFromState = (updatedPlayerObj) => {\n    let copyOfPlayers = this.state.players.map((player) => {\n      if(player.id === updatedPlayerObj.id) {\n        return updatedPlayerObj\n      } else {\n        return player\n      }\n    })\n    this.setState(() => {\n      return {players: copyOfPlayers}\n    })\n  }\n\n  handleScoreChange = (playerID, delta) => {\n      let foundPlayer = this.state.players.find(player => player.id === playerID)\n      let updatedPlayer = {...foundPlayer}\n      updatedPlayer.score += delta \n      this.updatePlayerFromState(updatedPlayer)\n  }\n\n  getHighestScore = () => {\n    let scores = this.state.players.map((player) => player.score)\n    let highScore = Math.max(...scores)\n    if (highScore) {\n      return highScore;\n    } \n    return null;\n  }\n  \n\n  render() {\n\n    let totalScores = this.state.players.reduce((total, player) => {\n      return total + player.score\n    }, 0)\n\n    let highScore = this.getHighestScore()\n    \n    let arrayOfPlayerComponents = this.state.players.map((player) => {\n      return <Player \n                key={player.id}\n                player={player} \n                id={player.id}\n                handleRemovePlayer={this.handleRemovePlayer}\n                changeScore={this.handleScoreChange}\n                isHighScore={highScore === player.score} \n              />\n    })\n  \n    return (\n      <div className='scoreboard'>\n        <Banner />\n        <Header\n          totalPlayers={arrayOfPlayerComponents.length} \n          totalScores={totalScores}\n        />\n        { arrayOfPlayerComponents }\n        <Form addPlayer={this.handleAddPlayer} />\n      </div>\n    )\n\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}